#!/usr/bin/perl

# 快速创建`babel-macro`项目

use v5.26;
use strict;
use utf8;
use autodie;
use warnings;
use Encode qw(decode encode);
use experimental 'smartmatch'; # 忽略智能匹配的错误警告
use File::Path qw(make_path);
use File::Spec::Functions qw(catfile); # join path

# 保存的文件目录
my $saveDir = shift @ARGV;

unless(defined($saveDir)){
	exit;
}

$saveDir =~ s/\p{space}/\\ /g; # 避免windows上的空格文件

my $packageJson = <<'t';
{
	"name": "babel-macro",
	"version": "0.1.0",
	"description": "",
	"main": "src/index.js",
	"scripts": {
		"build": "./node_modules/.bin/babel src --out-dir dist"
	},
	"keywords": [
		"Ajanuw",
		"babel-plugin-macros"
	],
	"author": "Ajanuw",
	"license": "MIT",
	"devDependencies": {
		"@babel/cli": "^7.8.4",
		"@babel/core": "^7.8.4",
		"@babel/plugin-proposal-class-properties": "^7.8.3",
		"@babel/preset-env": "^7.8.4",
		"babel-plugin-macros": "^2.8.0"
	}
}

t

my $babelConfigJs = <<'t';
module.exports = {
	presets: ["@babel/preset-env"],
	plugins: ["macros"]
};

t

my $gitignore = <<'t';
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

t

my $srcIndex = <<'t';
import m from "./my.macro";

console.log(m``);

t

my $srcMyMacro = <<'t';
const { createMacro } = require("babel-plugin-macros");

module.exports = createMacro(function myMacro({ references, state, babel }) {
		const { types: t, traverse, parse } = babel;

		references.default.forEach(path => {
				const parentPath = path.parentPath;
				if (parentPath.type === "TaggedTemplateExpression") {
					parentPath.replaceWith(t.stringLiteral("ajanuw"));
				}
			});
	});

t

my $readme = <<'t';
## babel-macro

- [@babel/types](https://babeljs.io/docs/en/babel-types)
- [astexplorer](https://astexplorer.net/)

t

# 目录不存在，则创建
unless(-e $saveDir){
	mkdir($saveDir);
}

my $newFiles = [
	{
		path => 'package.json',
		m    => $packageJson
	},
	{
		path => 'babel.config.js',
		m    => $babelConfigJs
	},
	{
		path => '.gitignore',
		m    => $gitignore
	},
	{
		path => 'README.md',
		m    => $readme
	},
	{
		path => 'src/index.js',
		m    => $srcIndex
	},
	{
		path => 'src/my.macro.js',
		m    => $srcMyMacro
	}
];

if(-d $saveDir){

	my $srcPath = catfile($saveDir, 'src');
	mkdir($srcPath) unless(-d $srcPath);

	my $fh;
	for(@{$newFiles}) {
		my $path = catfile($saveDir, $_->{path});
		open($fh, ">", $path);
		print $fh encode('utf-8', $_->{m});
	}
	close $fh;
}
