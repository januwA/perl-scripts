#!/usr/bin/perl

# https://docs.nestjs.com/cli/usages

use v5.10;
use strict;
use utf8;
use autodie;
use warnings;
use Encode qw(decode encode);
use experimental 'smartmatch';
use Data::Dumper qw(Dumper);
use Getopt::Long qw(GetOptions);
use File::Basename;
use File::Spec::Functions;
use POSIX qw(strftime);
use File::Path qw(make_path remove_tree);

use Cwd qw(abs_path);
use lib dirname (abs_path(__FILE__));
use PrintHelp;

my $help;
my $module;
my $spec;
my $build;

GetOptions (
	"help"         => \$help,
	"module=s"     => \$module,
	"spec"         => \$spec,
	"build"         => \$build,
);

if(defined($help)){
	PrintHelp->new([
			"anest -h",
			"anest -mo cats",
			"cd my_project && anest -build",
		],
		{
			help => {
				msg => "帮助文档.",
				alias => "h",
			},
			module => {
				msg => "同时创建module,controller,service",
				alias => "mo",
			},
			spec => {
				msg => "是否需要spec文件，默认不要",
				alias => "spec",
			},
			build => {
				msg => "打包生产模式",
				alias => "build",
			}
		});
	exit;
}

# 创建模块，自动创建module,controller,service
if(defined($module)) {
	my $c_mo = "nest generate mo $module";
	my $c_co = "nest generate co $module";
	my $c_s = "nest generate s $module";
	if (!defined($spec)) {
		$c_mo .= ' --no-spec';
		$c_co .= ' --no-spec';
		$c_s .= ' --no-spec';
	}
	system $c_mo;
	system $c_co;
	system $c_s;
	exit;
}

# 无源码打包，生产模式
if(defined($build)) {
	exit unless(-e "./package.json" and -d "./src");

	# /d/ajanuw/server => server
	my $dirName = basename($ENV{'PWD'});

	# server_2000_1_4_build
	my $buildDirName = $dirName . '_' . strftime("%Y_%m_%d", localtime) . "_build";

	# ../server_2000_1_4_build
	my $buildDirNamePath = "../$buildDirName";

	# 删除旧的打包文件
	# remove_tree($buildDirNamePath) if(-e $buildDirNamePath);

	# 目录不存则创建
	make_path($buildDirNamePath) unless(-e $buildDirNamePath);

	# 开始打包
	# system 'npm run build';

	# 无视这些目录
	my @outs = ("./node_modules", "./test", "./src", "./.git");

	for(<./* ./.[!.]*>) {

		# https://www.cnblogs.com/ajanuw/p/9260777.html
		next if(/node_modules|test|src|\.git|tsconfig/);

		system "cp -a $_ $buildDirNamePath";
	}

	say catfile(dirname($ENV{'PWD'}), $buildDirName);

	exit;
}
