#!/usr/bin/perl

# 在发布Flutetr包时，需要设置环境变量，将使用这个脚本完成
# -p 发布时: 增加[http_proxy]和[https_proxy],删除[PUB_HOSTED_URL]和[FLUTTER_STORAGE_BASE_URL]
# -r 发布成功后，还原环境变量配置 

use strict;
use utf8;
use autodie;
use warnings;
use Encode qw(decode encode);
use Data::Dumper qw(Dumper);
use Getopt::Long qw(GetOptions);
use File::Basename;

use Cwd qw(abs_path);
use lib dirname (abs_path(__FILE__));

use PrintHelp;

my $publish; # publish plugin
my $reset;
my $help;
my $check;
my $codegen;
my $build; # build apk
my $proxyPort = 19996;

GetOptions (
	"proxy-port=i" => \$proxyPort,
	"reset"        => \$reset,
	"publish"      => \$publish,
	"help"         => \$help,
	"check"        => \$check,
	"codegen"      => \$codegen,
	"build"        => \$build,
);

if(defined($help)){
	PrintHelp->new([
			"afpp -h"
		],
		{
			publish => {
				msg => "发布包命令",
			},
			reset => {
				msg => "设置china的安装包环境",
			},
			check => {
				msg => "检查包是否有错误",
			},
			"proxy-port" => {
				msg => "发布时设置本地代理代理端口号",
				default => 19996,
			},
			"codegen" => {
				msg => "生成*.g.dart文件",
			},
			"build" => {
				msg => "分包打包APK",
			},
			help => {
				msg => "帮助文档.",
			}
		});
	exit;
}

if(defined($check)){
	system 'flutter packages pub lish --dry-run';
	exit;
}

if(defined($build)) {
	system 'flutter build apk --split-per-abi';
	exit;
}

sub resetENV {
	delete $ENV{'http_proxy'};
	delete $ENV{'https_proxy'};
	$ENV{'PUB_HOSTED_URL'} = "https://pub.flutter-io.cn";
	$ENV{'FLUTTER_STORAGE_BASE_URL'} = "https://storage.flutter-io.cn";
}

sub publishENV {
	delete $ENV{'PUB_HOSTED_URL'};
	delete $ENV{'FLUTTER_STORAGE_BASE_URL'};
	$ENV{'http_proxy'} = "http://127.0.0.1:$proxyPort";
	$ENV{'https_proxy'} = "https://127.0.0.1:$proxyPort";
}

# 发布：设置环境变量，并执行发布命令
if(defined($publish)){
	publishENV();
	system 'flutter packages pub lish';
	resetENV();
}

# 发布成功，重置环境变量
if(defined($reset)){
	resetENV();
}

if(defined($codegen)){
	system 'flutter packages pub run build_runner watch --delete-conflicting-outputs';
}

