#!/usr/bin/perl

# 递归打印目录结构

use v5.26;
use strict;
use utf8;
use autodie;
use warnings;
use Encode qw(decode encode);
use File::Spec::Functions;
use File::Basename;
use experimental 'smartmatch'; # 忽略智能匹配的错误警告
use Getopt::Long qw(GetOptions);
use Term::ANSIColor;

use Cwd qw(abs_path);
use lib dirname (abs_path(__FILE__));

use PrintHelp;

# 递归目录结构的次数， 0全部递归
my $depath = 0;
my $help;
my $ignores;

GetOptions (
	"depath=i" => \$depath,
	"ignores=s" => \$ignores,
	"help"     => \$help
);

if(defined($help)){
	PrintHelp->new([
			"atree [path=./] [options]",
			"atree ./lib",
			"atree ./lib --depath 1",
			"or",
			"atree ./lib -d 1",
			"atree -i ~/.atree -d 3"
		],
		{
			ignores => {
				msg => "无视目录的配置文件路径",
			},
			depath => {
				msg => "查询目录深度",
				default => '0 无限'
			},
			help => {
				msg => "帮助文档",
			}
		});
	exit;
}

my $dirPath = $ARGV[0] // "./";

# 跳过不存在的目录
exit unless(-d -e $dirPath);

my $ignoresFileName = ".atree";
my $ignoresPath = $ignores // catfile($dirPath, $ignoresFileName);

unless( -e $ignoresPath ) {
	$ignoresPath = catfile($ENV{HOME}, $ignoresFileName)
}

# 默认忽视这些目录
my @ignores = ();

# 读取忽略文件
sub readIgnores {
if(defined($ignoresPath) && -e $ignoresPath){
	my $fh;
	open $fh, "<", $ignoresPath;
	while(<$fh>) {
		chomp;

		# trim
		$_ =~ s/^\s+|\s+$//g;

		# 跳过注释行
		next if /^#/;
		push @ignores, $_;
	}
	close $fh;
}
}
readIgnores();

sub scan {
my ($dir, $dep, $depathCount) = @_;
if($dir && -d -e $dir) {
	my @files = <$dir/* $dir/.[!.]*>;
	$depathCount++;
	for(@files){
		# next if /\.{1,2}$/g;
		my $p = catfile($_);
		if(-d $p){
			my($filename) = fileparse($p);
			unless($filename ~~ @ignores){
				say encode('utf-8', "$dep$filename/");
				if($depath eq 0 or $depathCount lt $depath) {
					scan($p, "|  ".$dep."", $depathCount);
				}
			}
		}else { 
			my($filename) = fileparse($p);
			say encode('utf-8', "$dep$filename");
		}
	}
};
}

scan($dirPath, "|- ", 0);
